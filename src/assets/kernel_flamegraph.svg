<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="134" onload="init(evt)" viewBox="0 0 1200 134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="134" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="117.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="117.00"> </text><svg id="frames" x="10" width="1180" total_samples="76991"><g><title>[&lt;alloc::collections::btree::map::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next+286] (10 samples, 0.01%)</title><rect x="0.0584%" y="37" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="45" fg:w="10"/><text x="0.3084%" y="47.50"></text></g><g><title>[&lt;alloc::collections::btree::map::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next] (81 samples, 0.11%)</title><rect x="0.0104%" y="53" width="0.1052%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="81"/><text x="0.2604%" y="63.50"></text></g><g><title>[&lt;kernel::scheme::root::RootScheme as kernel::scheme::KernelScheme&gt;::kread] (27 samples, 0.04%)</title><rect x="0.1585%" y="53" width="0.0351%" height="15" fill="rgb(221,193,54)" fg:x="122" fg:w="27"/><text x="0.4085%" y="63.50"></text></g><g><title>[&lt;kernel::scheme::root::RootScheme as kernel::scheme::KernelScheme&gt;::kwrite] (17 samples, 0.02%)</title><rect x="0.1935%" y="53" width="0.0221%" height="15" fill="rgb(248,212,6)" fg:x="149" fg:w="17"/><text x="0.4435%" y="63.50"></text></g><g><title>[&lt;kernel::scheme::time::TimeScheme as kernel::scheme::KernelScheme&gt;::kread+557] (9 samples, 0.01%)</title><rect x="0.2156%" y="37" width="0.0117%" height="15" fill="rgb(208,68,35)" fg:x="166" fg:w="9"/><text x="0.4656%" y="47.50"></text></g><g><title>[&lt;kernel::scheme::time::TimeScheme as kernel::scheme::KernelScheme&gt;::kread] (21 samples, 0.03%)</title><rect x="0.2156%" y="53" width="0.0273%" height="15" fill="rgb(232,128,0)" fg:x="166" fg:w="21"/><text x="0.4656%" y="63.50"></text></g><g><title>[&lt;kernel::scheme::time::TimeScheme as kernel::scheme::KernelScheme&gt;::kread+564] (12 samples, 0.02%)</title><rect x="0.2273%" y="37" width="0.0156%" height="15" fill="rgb(207,160,47)" fg:x="175" fg:w="12"/><text x="0.4773%" y="47.50"></text></g><g><title>[[kernel]] (19 samples, 0.02%)</title><rect x="0.2546%" y="53" width="0.0247%" height="15" fill="rgb(228,23,34)" fg:x="196" fg:w="19"/><text x="0.5046%" y="63.50"></text></g><g><title>[__inner_syscall_instruction] (17 samples, 0.02%)</title><rect x="0.2793%" y="53" width="0.0221%" height="15" fill="rgb(218,30,26)" fg:x="215" fg:w="17"/><text x="0.5293%" y="63.50"></text></g><g><title>[__inner_syscall_instruction+98] (11 samples, 0.01%)</title><rect x="0.2870%" y="37" width="0.0143%" height="15" fill="rgb(220,122,19)" fg:x="221" fg:w="11"/><text x="0.5370%" y="47.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert] (10 samples, 0.01%)</title><rect x="0.3052%" y="53" width="0.0130%" height="15" fill="rgb(250,228,42)" fg:x="235" fg:w="10"/><text x="0.5552%" y="63.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range+1203] (8 samples, 0.01%)</title><rect x="0.3416%" y="37" width="0.0104%" height="15" fill="rgb(240,193,28)" fg:x="263" fg:w="8"/><text x="0.5916%" y="47.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range+1578] (15 samples, 0.02%)</title><rect x="0.3793%" y="37" width="0.0195%" height="15" fill="rgb(216,20,37)" fg:x="292" fg:w="15"/><text x="0.6293%" y="47.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range+477] (16 samples, 0.02%)</title><rect x="0.4598%" y="37" width="0.0208%" height="15" fill="rgb(206,188,39)" fg:x="354" fg:w="16"/><text x="0.7098%" y="47.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (201 samples, 0.26%)</title><rect x="0.3182%" y="53" width="0.2611%" height="15" fill="rgb(217,207,13)" fg:x="245" fg:w="201"/><text x="0.5682%" y="63.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range_mut] (11 samples, 0.01%)</title><rect x="0.5793%" y="53" width="0.0143%" height="15" fill="rgb(231,73,38)" fg:x="446" fg:w="11"/><text x="0.8293%" y="63.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove] (24 samples, 0.03%)</title><rect x="0.5936%" y="53" width="0.0312%" height="15" fill="rgb(225,20,46)" fg:x="457" fg:w="24"/><text x="0.8436%" y="63.50"></text></g><g><title>[alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked] (14 samples, 0.02%)</title><rect x="0.6247%" y="53" width="0.0182%" height="15" fill="rgb(210,31,41)" fg:x="481" fg:w="14"/><text x="0.8747%" y="63.50"></text></g><g><title>[alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv] (17 samples, 0.02%)</title><rect x="0.6481%" y="53" width="0.0221%" height="15" fill="rgb(221,200,47)" fg:x="499" fg:w="17"/><text x="0.8981%" y="63.50"></text></g><g><title>[kernel::arch::x86_64::arch_copy_to_user+10] (13 samples, 0.02%)</title><rect x="0.7131%" y="37" width="0.0169%" height="15" fill="rgb(226,26,5)" fg:x="549" fg:w="13"/><text x="0.9631%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::arch_copy_to_user] (25 samples, 0.03%)</title><rect x="0.7079%" y="53" width="0.0325%" height="15" fill="rgb(249,33,26)" fg:x="545" fg:w="25"/><text x="0.9579%" y="63.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page::inner+357] (13 samples, 0.02%)</title><rect x="0.7442%" y="37" width="0.0169%" height="15" fill="rgb(235,183,28)" fg:x="573" fg:w="13"/><text x="0.9942%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page::inner] (19 samples, 0.02%)</title><rect x="0.7403%" y="53" width="0.0247%" height="15" fill="rgb(221,5,38)" fg:x="570" fg:w="19"/><text x="0.9903%" y="63.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page] (27 samples, 0.04%)</title><rect x="0.7650%" y="53" width="0.0351%" height="15" fill="rgb(247,18,42)" fg:x="589" fg:w="27"/><text x="1.0150%" y="63.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::generic_irq::inner] (20 samples, 0.03%)</title><rect x="0.8001%" y="53" width="0.0260%" height="15" fill="rgb(241,131,45)" fg:x="616" fg:w="20"/><text x="1.0501%" y="63.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::generic_irq::inner+37] (20 samples, 0.03%)</title><rect x="0.8001%" y="37" width="0.0260%" height="15" fill="rgb(249,31,29)" fg:x="616" fg:w="20"/><text x="1.0501%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+107] (86 samples, 0.11%)</title><rect x="0.8404%" y="37" width="0.1117%" height="15" fill="rgb(225,111,53)" fg:x="647" fg:w="86"/><text x="1.0904%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+134] (132 samples, 0.17%)</title><rect x="0.9650%" y="37" width="0.1714%" height="15" fill="rgb(238,160,17)" fg:x="743" fg:w="132"/><text x="1.2150%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+226] (251 samples, 0.33%)</title><rect x="1.1443%" y="37" width="0.3260%" height="15" fill="rgb(214,148,48)" fg:x="881" fg:w="251"/><text x="1.3943%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+233] (292 samples, 0.38%)</title><rect x="1.4703%" y="37" width="0.3793%" height="15" fill="rgb(232,36,49)" fg:x="1132" fg:w="292"/><text x="1.7203%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+386] (141 samples, 0.18%)</title><rect x="1.8820%" y="37" width="0.1831%" height="15" fill="rgb(209,103,24)" fg:x="1449" fg:w="141"/><text x="2.1320%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+393] (173 samples, 0.22%)</title><rect x="2.0652%" y="37" width="0.2247%" height="15" fill="rgb(229,88,8)" fg:x="1590" fg:w="173"/><text x="2.3152%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+59] (10 samples, 0.01%)</title><rect x="2.3029%" y="37" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="1773" fg:w="10"/><text x="2.5529%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+61] (341 samples, 0.44%)</title><rect x="2.3159%" y="37" width="0.4429%" height="15" fill="rgb(254,191,54)" fg:x="1783" fg:w="341"/><text x="2.5659%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner] (1,766 samples, 2.29%)</title><rect x="0.8404%" y="53" width="2.2938%" height="15" fill="rgb(241,83,37)" fg:x="647" fg:w="1766"/><text x="1.0904%" y="63.50">[..</text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner+68] (289 samples, 0.38%)</title><rect x="2.7588%" y="37" width="0.3754%" height="15" fill="rgb(233,36,39)" fg:x="2124" fg:w="289"/><text x="3.0088%" y="47.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack] (82 samples, 0.11%)</title><rect x="3.1341%" y="53" width="0.1065%" height="15" fill="rgb(226,3,54)" fg:x="2413" fg:w="82"/><text x="3.3841%" y="63.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::syscall::syscall_instruction] (35 samples, 0.05%)</title><rect x="3.2406%" y="53" width="0.0455%" height="15" fill="rgb(245,192,40)" fg:x="2495" fg:w="35"/><text x="3.4906%" y="63.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::pit::inner+20] (176 samples, 0.23%)</title><rect x="3.2861%" y="37" width="0.2286%" height="15" fill="rgb(238,167,29)" fg:x="2530" fg:w="176"/><text x="3.5361%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::pit::inner] (183 samples, 0.24%)</title><rect x="3.2861%" y="53" width="0.2377%" height="15" fill="rgb(232,182,51)" fg:x="2530" fg:w="183"/><text x="3.5361%" y="63.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::pit] (126 samples, 0.16%)</title><rect x="3.5238%" y="53" width="0.1637%" height="15" fill="rgb(231,60,39)" fg:x="2713" fg:w="126"/><text x="3.7738%" y="63.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::tlb::inner] (46 samples, 0.06%)</title><rect x="3.6874%" y="53" width="0.0597%" height="15" fill="rgb(208,69,12)" fg:x="2839" fg:w="46"/><text x="3.9374%" y="63.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::tlb::inner+116] (44 samples, 0.06%)</title><rect x="3.6900%" y="37" width="0.0571%" height="15" fill="rgb(235,93,37)" fg:x="2841" fg:w="44"/><text x="3.9400%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::tlb] (40 samples, 0.05%)</title><rect x="3.7472%" y="53" width="0.0520%" height="15" fill="rgb(213,116,39)" fg:x="2885" fg:w="40"/><text x="3.9972%" y="63.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup::inner+24] (641 samples, 0.83%)</title><rect x="3.8056%" y="37" width="0.8326%" height="15" fill="rgb(222,207,29)" fg:x="2930" fg:w="641"/><text x="4.0556%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup::inner] (655 samples, 0.85%)</title><rect x="3.7991%" y="53" width="0.8507%" height="15" fill="rgb(206,96,30)" fg:x="2925" fg:w="655"/><text x="4.0491%" y="63.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup::inner+25] (9 samples, 0.01%)</title><rect x="4.6382%" y="37" width="0.0117%" height="15" fill="rgb(218,138,4)" fg:x="3571" fg:w="9"/><text x="4.8882%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup+1] (18 samples, 0.02%)</title><rect x="5.2149%" y="37" width="0.0234%" height="15" fill="rgb(250,191,14)" fg:x="4015" fg:w="18"/><text x="5.4649%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup] (460 samples, 0.60%)</title><rect x="4.6499%" y="53" width="0.5975%" height="15" fill="rgb(239,60,40)" fg:x="3580" fg:w="460"/><text x="4.8999%" y="63.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter+152] (8,666 samples, 11.26%)</title><rect x="5.2552%" y="37" width="11.2559%" height="15" fill="rgb(206,27,48)" fg:x="4046" fg:w="8666"/><text x="5.5052%" y="47.50">[kernel::arch::x8..</text></g><g><title>[kernel::arch::x86_shared::time::counter+160] (6,418 samples, 8.34%)</title><rect x="16.5110%" y="37" width="8.3360%" height="15" fill="rgb(225,35,8)" fg:x="12712" fg:w="6418"/><text x="16.7610%" y="47.50">[kernel::arc..</text></g><g><title>[kernel::arch::x86_shared::time::counter+164] (6,172 samples, 8.02%)</title><rect x="24.8471%" y="37" width="8.0165%" height="15" fill="rgb(250,213,24)" fg:x="19130" fg:w="6172"/><text x="25.0971%" y="47.50">[kernel::ar..</text></g><g><title>[kernel::arch::x86_shared::time::counter+168] (11 samples, 0.01%)</title><rect x="32.8636%" y="37" width="0.0143%" height="15" fill="rgb(247,123,22)" fg:x="25302" fg:w="11"/><text x="33.1136%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter+218] (10 samples, 0.01%)</title><rect x="32.8896%" y="37" width="0.0130%" height="15" fill="rgb(231,138,38)" fg:x="25322" fg:w="10"/><text x="33.1396%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter+28] (13 samples, 0.02%)</title><rect x="32.9038%" y="37" width="0.0169%" height="15" fill="rgb(231,145,46)" fg:x="25333" fg:w="13"/><text x="33.1538%" y="47.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (21,307 samples, 27.67%)</title><rect x="5.2474%" y="53" width="27.6747%" height="15" fill="rgb(251,118,11)" fg:x="4040" fg:w="21307"/><text x="5.4974%" y="63.50">[kernel::arch::x86_shared::time::counter]</text></g><g><title>[kernel::context::arch::switch_to_inner+57] (49 samples, 0.06%)</title><rect x="32.9298%" y="37" width="0.0636%" height="15" fill="rgb(217,147,25)" fg:x="25353" fg:w="49"/><text x="33.1798%" y="47.50"></text></g><g><title>[kernel::context::arch::switch_to_inner] (57 samples, 0.07%)</title><rect x="32.9220%" y="53" width="0.0740%" height="15" fill="rgb(247,81,37)" fg:x="25347" fg:w="57"/><text x="33.1720%" y="63.50"></text></g><g><title>[kernel::context::context::Context::unblock] (56 samples, 0.07%)</title><rect x="33.0039%" y="53" width="0.0727%" height="15" fill="rgb(209,12,38)" fg:x="25410" fg:w="56"/><text x="33.2539%" y="63.50"></text></g><g><title>[kernel::context::context::Context::unblock+91] (55 samples, 0.07%)</title><rect x="33.0052%" y="37" width="0.0714%" height="15" fill="rgb(227,1,9)" fg:x="25411" fg:w="55"/><text x="33.2552%" y="47.50"></text></g><g><title>[kernel::context::current+268] (10 samples, 0.01%)</title><rect x="33.1285%" y="37" width="0.0130%" height="15" fill="rgb(248,47,43)" fg:x="25506" fg:w="10"/><text x="33.3785%" y="47.50"></text></g><g><title>[kernel::context::current+287] (11 samples, 0.01%)</title><rect x="33.1428%" y="37" width="0.0143%" height="15" fill="rgb(221,10,30)" fg:x="25517" fg:w="11"/><text x="33.3928%" y="47.50"></text></g><g><title>[kernel::context::current+28] (11 samples, 0.01%)</title><rect x="33.1571%" y="37" width="0.0143%" height="15" fill="rgb(210,229,1)" fg:x="25528" fg:w="11"/><text x="33.4071%" y="47.50"></text></g><g><title>[kernel::context::current] (74 samples, 0.10%)</title><rect x="33.0766%" y="53" width="0.0961%" height="15" fill="rgb(222,148,37)" fg:x="25466" fg:w="74"/><text x="33.3266%" y="63.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (21 samples, 0.03%)</title><rect x="33.1844%" y="53" width="0.0273%" height="15" fill="rgb(234,67,33)" fg:x="25549" fg:w="21"/><text x="33.4344%" y="63.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (8 samples, 0.01%)</title><rect x="33.2130%" y="53" width="0.0104%" height="15" fill="rgb(247,98,35)" fg:x="25571" fg:w="8"/><text x="33.4630%" y="63.50"></text></g><g><title>[kernel::context::memory::Flusher::flush+176] (15 samples, 0.02%)</title><rect x="33.2545%" y="37" width="0.0195%" height="15" fill="rgb(247,138,52)" fg:x="25603" fg:w="15"/><text x="33.5045%" y="47.50"></text></g><g><title>[kernel::context::memory::Flusher::flush+195] (24 samples, 0.03%)</title><rect x="33.2844%" y="37" width="0.0312%" height="15" fill="rgb(213,79,30)" fg:x="25626" fg:w="24"/><text x="33.5344%" y="47.50"></text></g><g><title>[kernel::context::memory::Flusher::flush+199] (9 samples, 0.01%)</title><rect x="33.3156%" y="37" width="0.0117%" height="15" fill="rgb(246,177,23)" fg:x="25650" fg:w="9"/><text x="33.5656%" y="47.50"></text></g><g><title>[kernel::context::memory::Flusher::flush+475] (119 samples, 0.15%)</title><rect x="33.3390%" y="37" width="0.1546%" height="15" fill="rgb(230,62,27)" fg:x="25668" fg:w="119"/><text x="33.5890%" y="47.50"></text></g><g><title>[kernel::context::memory::Flusher::flush+934] (12 samples, 0.02%)</title><rect x="33.5013%" y="37" width="0.0156%" height="15" fill="rgb(216,154,8)" fg:x="25793" fg:w="12"/><text x="33.7513%" y="47.50"></text></g><g><title>[kernel::context::memory::Flusher::flush+946] (711 samples, 0.92%)</title><rect x="33.5195%" y="37" width="0.9235%" height="15" fill="rgb(244,35,45)" fg:x="25807" fg:w="711"/><text x="33.7695%" y="47.50"></text></g><g><title>[kernel::context::memory::Flusher::flush+950] (27 samples, 0.04%)</title><rect x="34.4508%" y="37" width="0.0351%" height="15" fill="rgb(251,115,12)" fg:x="26524" fg:w="27"/><text x="34.7008%" y="47.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (977 samples, 1.27%)</title><rect x="33.2273%" y="53" width="1.2690%" height="15" fill="rgb(240,54,50)" fg:x="25582" fg:w="977"/><text x="33.4773%" y="63.50"></text></g><g><title>[kernel::context::memory::UserGrants::insert] (26 samples, 0.03%)</title><rect x="34.5144%" y="53" width="0.0338%" height="15" fill="rgb(233,84,52)" fg:x="26573" fg:w="26"/><text x="34.7644%" y="63.50"></text></g><g><title>[kernel::context::memory::correct_inner] (10 samples, 0.01%)</title><rect x="34.5560%" y="53" width="0.0130%" height="15" fill="rgb(207,117,47)" fg:x="26605" fg:w="10"/><text x="34.8060%" y="63.50"></text></g><g><title>[kernel::context::switch::switch+1083] (10 samples, 0.01%)</title><rect x="34.5950%" y="37" width="0.0130%" height="15" fill="rgb(249,43,39)" fg:x="26635" fg:w="10"/><text x="34.8450%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1120] (9 samples, 0.01%)</title><rect x="34.6092%" y="37" width="0.0117%" height="15" fill="rgb(209,38,44)" fg:x="26646" fg:w="9"/><text x="34.8592%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+112] (33 samples, 0.04%)</title><rect x="34.6274%" y="37" width="0.0429%" height="15" fill="rgb(236,212,23)" fg:x="26660" fg:w="33"/><text x="34.8774%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1131] (282 samples, 0.37%)</title><rect x="34.6703%" y="37" width="0.3663%" height="15" fill="rgb(242,79,21)" fg:x="26693" fg:w="282"/><text x="34.9203%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1148] (13 samples, 0.02%)</title><rect x="35.0470%" y="37" width="0.0169%" height="15" fill="rgb(211,96,35)" fg:x="26983" fg:w="13"/><text x="35.2970%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+114] (999 samples, 1.30%)</title><rect x="35.0638%" y="37" width="1.2976%" height="15" fill="rgb(253,215,40)" fg:x="26996" fg:w="999"/><text x="35.3138%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1156] (211 samples, 0.27%)</title><rect x="36.3692%" y="37" width="0.2741%" height="15" fill="rgb(211,81,21)" fg:x="28001" fg:w="211"/><text x="36.6192%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1178] (11 samples, 0.01%)</title><rect x="36.6497%" y="37" width="0.0143%" height="15" fill="rgb(208,190,38)" fg:x="28217" fg:w="11"/><text x="36.8997%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+121] (634 samples, 0.82%)</title><rect x="36.6744%" y="37" width="0.8235%" height="15" fill="rgb(235,213,38)" fg:x="28236" fg:w="634"/><text x="36.9244%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1230] (10 samples, 0.01%)</title><rect x="37.4979%" y="37" width="0.0130%" height="15" fill="rgb(237,122,38)" fg:x="28870" fg:w="10"/><text x="37.7479%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+144] (13 samples, 0.02%)</title><rect x="37.5278%" y="37" width="0.0169%" height="15" fill="rgb(244,218,35)" fg:x="28893" fg:w="13"/><text x="37.7778%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1543] (221 samples, 0.29%)</title><rect x="37.5511%" y="37" width="0.2870%" height="15" fill="rgb(240,68,47)" fg:x="28911" fg:w="221"/><text x="37.8011%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1550] (14 samples, 0.02%)</title><rect x="37.8382%" y="37" width="0.0182%" height="15" fill="rgb(210,16,53)" fg:x="29132" fg:w="14"/><text x="38.0882%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1554] (196 samples, 0.25%)</title><rect x="37.8564%" y="37" width="0.2546%" height="15" fill="rgb(235,124,12)" fg:x="29146" fg:w="196"/><text x="38.1064%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+159] (17 samples, 0.02%)</title><rect x="38.1226%" y="37" width="0.0221%" height="15" fill="rgb(224,169,11)" fg:x="29351" fg:w="17"/><text x="38.3726%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1615] (10 samples, 0.01%)</title><rect x="38.1447%" y="37" width="0.0130%" height="15" fill="rgb(250,166,2)" fg:x="29368" fg:w="10"/><text x="38.3947%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1911] (560 samples, 0.73%)</title><rect x="38.1720%" y="37" width="0.7274%" height="15" fill="rgb(242,216,29)" fg:x="29389" fg:w="560"/><text x="38.4220%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1913] (300 samples, 0.39%)</title><rect x="38.8994%" y="37" width="0.3897%" height="15" fill="rgb(230,116,27)" fg:x="29949" fg:w="300"/><text x="39.1494%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1921] (10,224 samples, 13.28%)</title><rect x="39.2890%" y="37" width="13.2795%" height="15" fill="rgb(228,99,48)" fg:x="30249" fg:w="10224"/><text x="39.5390%" y="47.50">[kernel::context::sw..</text></g><g><title>[kernel::context::switch::switch+1927] (448 samples, 0.58%)</title><rect x="52.5685%" y="37" width="0.5819%" height="15" fill="rgb(253,11,6)" fg:x="40473" fg:w="448"/><text x="52.8185%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1929] (18,890 samples, 24.54%)</title><rect x="53.1504%" y="37" width="24.5353%" height="15" fill="rgb(247,143,39)" fg:x="40921" fg:w="18890"/><text x="53.4004%" y="47.50">[kernel::context::switch::switch+1929]</text></g><g><title>[kernel::context::switch::switch+1931] (805 samples, 1.05%)</title><rect x="77.6857%" y="37" width="1.0456%" height="15" fill="rgb(236,97,10)" fg:x="59811" fg:w="805"/><text x="77.9357%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+1938] (14,122 samples, 18.34%)</title><rect x="78.7313%" y="37" width="18.3424%" height="15" fill="rgb(233,208,19)" fg:x="60616" fg:w="14122"/><text x="78.9813%" y="47.50">[kernel::context::switch::swi..</text></g><g><title>[kernel::context::switch::switch+2089] (19 samples, 0.02%)</title><rect x="97.0919%" y="37" width="0.0247%" height="15" fill="rgb(216,164,2)" fg:x="74752" fg:w="19"/><text x="97.3419%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+208] (32 samples, 0.04%)</title><rect x="97.1165%" y="37" width="0.0416%" height="15" fill="rgb(220,129,5)" fg:x="74771" fg:w="32"/><text x="97.3665%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+2913] (18 samples, 0.02%)</title><rect x="97.1711%" y="37" width="0.0234%" height="15" fill="rgb(242,17,10)" fg:x="74813" fg:w="18"/><text x="97.4211%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+2916] (51 samples, 0.07%)</title><rect x="97.1945%" y="37" width="0.0662%" height="15" fill="rgb(242,107,0)" fg:x="74831" fg:w="51"/><text x="97.4445%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+2983] (14 samples, 0.02%)</title><rect x="97.2789%" y="37" width="0.0182%" height="15" fill="rgb(251,28,31)" fg:x="74896" fg:w="14"/><text x="97.5289%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+328] (32 samples, 0.04%)</title><rect x="97.3049%" y="37" width="0.0416%" height="15" fill="rgb(233,223,10)" fg:x="74916" fg:w="32"/><text x="97.5549%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+441] (29 samples, 0.04%)</title><rect x="97.3802%" y="37" width="0.0377%" height="15" fill="rgb(215,21,27)" fg:x="74974" fg:w="29"/><text x="97.6302%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+59] (27 samples, 0.04%)</title><rect x="97.4322%" y="37" width="0.0351%" height="15" fill="rgb(232,23,21)" fg:x="75014" fg:w="27"/><text x="97.6822%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+944] (8 samples, 0.01%)</title><rect x="97.5088%" y="37" width="0.0104%" height="15" fill="rgb(244,5,23)" fg:x="75073" fg:w="8"/><text x="97.7588%" y="47.50"></text></g><g><title>[kernel::context::switch::switch+94] (18 samples, 0.02%)</title><rect x="97.5231%" y="37" width="0.0234%" height="15" fill="rgb(226,81,46)" fg:x="75084" fg:w="18"/><text x="97.7731%" y="47.50"></text></g><g><title>[kernel::context::switch::switch] (48,494 samples, 62.99%)</title><rect x="34.5703%" y="53" width="62.9866%" height="15" fill="rgb(247,70,30)" fg:x="26616" fg:w="48494"/><text x="34.8203%" y="63.50">[kernel::context::switch::switch]</text></g><g><title>[kernel::context::switch::switch_finish_hook+117] (22 samples, 0.03%)</title><rect x="97.5569%" y="37" width="0.0286%" height="15" fill="rgb(212,68,19)" fg:x="75110" fg:w="22"/><text x="97.8069%" y="47.50"></text></g><g><title>[kernel::context::switch::switch_finish_hook+233] (14 samples, 0.02%)</title><rect x="97.5906%" y="37" width="0.0182%" height="15" fill="rgb(240,187,13)" fg:x="75136" fg:w="14"/><text x="97.8406%" y="47.50"></text></g><g><title>[kernel::context::switch::switch_finish_hook+61] (9 samples, 0.01%)</title><rect x="97.6439%" y="37" width="0.0117%" height="15" fill="rgb(223,113,26)" fg:x="75177" fg:w="9"/><text x="97.8939%" y="47.50"></text></g><g><title>[kernel::context::switch::switch_finish_hook+688] (11 samples, 0.01%)</title><rect x="97.6595%" y="37" width="0.0143%" height="15" fill="rgb(206,192,2)" fg:x="75189" fg:w="11"/><text x="97.9095%" y="47.50"></text></g><g><title>[kernel::context::switch::switch_finish_hook+713] (43 samples, 0.06%)</title><rect x="97.6971%" y="37" width="0.0559%" height="15" fill="rgb(241,108,4)" fg:x="75218" fg:w="43"/><text x="97.9471%" y="47.50"></text></g><g><title>[kernel::context::switch::switch_finish_hook] (159 samples, 0.21%)</title><rect x="97.5569%" y="53" width="0.2065%" height="15" fill="rgb(247,173,49)" fg:x="75110" fg:w="159"/><text x="97.8069%" y="63.50"></text></g><g><title>[kernel::devices::uart_16550::SerialPort&lt;T&gt;::write+147] (50 samples, 0.06%)</title><rect x="97.7634%" y="37" width="0.0649%" height="15" fill="rgb(224,114,35)" fg:x="75269" fg:w="50"/><text x="98.0134%" y="47.50"></text></g><g><title>[kernel::devices::uart_16550::SerialPort&lt;T&gt;::write+157] (103 samples, 0.13%)</title><rect x="97.8283%" y="37" width="0.1338%" height="15" fill="rgb(245,159,27)" fg:x="75319" fg:w="103"/><text x="98.0783%" y="47.50"></text></g><g><title>[kernel::devices::uart_16550::SerialPort&lt;T&gt;::write] (155 samples, 0.20%)</title><rect x="97.7634%" y="53" width="0.2013%" height="15" fill="rgb(245,172,44)" fg:x="75269" fg:w="155"/><text x="98.0134%" y="63.50"></text></g><g><title>[kernel::event::trigger] (16 samples, 0.02%)</title><rect x="97.9647%" y="53" width="0.0208%" height="15" fill="rgb(236,23,11)" fg:x="75424" fg:w="16"/><text x="98.2147%" y="63.50"></text></g><g><title>[kernel::memory::allocate_p2frame] (8 samples, 0.01%)</title><rect x="97.9894%" y="53" width="0.0104%" height="15" fill="rgb(205,117,38)" fg:x="75443" fg:w="8"/><text x="98.2394%" y="63.50"></text></g><g><title>[kernel::memory::get_page_info+73] (24 samples, 0.03%)</title><rect x="98.0491%" y="37" width="0.0312%" height="15" fill="rgb(237,72,25)" fg:x="75489" fg:w="24"/><text x="98.2991%" y="47.50"></text></g><g><title>[kernel::memory::get_page_info+81] (11 samples, 0.01%)</title><rect x="98.0829%" y="37" width="0.0143%" height="15" fill="rgb(244,70,9)" fg:x="75515" fg:w="11"/><text x="98.3329%" y="47.50"></text></g><g><title>[kernel::memory::get_page_info] (81 samples, 0.11%)</title><rect x="97.9998%" y="53" width="0.1052%" height="15" fill="rgb(217,125,39)" fg:x="75451" fg:w="81"/><text x="98.2498%" y="63.50"></text></g><g><title>[kernel::ptrace::breakpoint_callback] (22 samples, 0.03%)</title><rect x="98.1063%" y="53" width="0.0286%" height="15" fill="rgb(235,36,10)" fg:x="75533" fg:w="22"/><text x="98.3563%" y="63.50"></text></g><g><title>[kernel::run_userspace+78] (13 samples, 0.02%)</title><rect x="98.1452%" y="37" width="0.0169%" height="15" fill="rgb(251,123,47)" fg:x="75563" fg:w="13"/><text x="98.3952%" y="47.50"></text></g><g><title>[kernel::run_userspace] (22 samples, 0.03%)</title><rect x="98.1348%" y="53" width="0.0286%" height="15" fill="rgb(221,13,13)" fg:x="75555" fg:w="22"/><text x="98.3848%" y="63.50"></text></g><g><title>[kernel::scheme::SchemeList::get] (8 samples, 0.01%)</title><rect x="98.1634%" y="53" width="0.0104%" height="15" fill="rgb(238,131,9)" fg:x="75577" fg:w="8"/><text x="98.4134%" y="63.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (10 samples, 0.01%)</title><rect x="98.1842%" y="53" width="0.0130%" height="15" fill="rgb(211,50,8)" fg:x="75593" fg:w="10"/><text x="98.4342%" y="63.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner+880] (11 samples, 0.01%)</title><rect x="98.2141%" y="37" width="0.0143%" height="15" fill="rgb(245,182,24)" fg:x="75616" fg:w="11"/><text x="98.4641%" y="47.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (31 samples, 0.04%)</title><rect x="98.1972%" y="53" width="0.0403%" height="15" fill="rgb(242,14,37)" fg:x="75603" fg:w="31"/><text x="98.4472%" y="63.50"></text></g><g><title>[kernel::scheme::user::UserInner::capture_inner] (14 samples, 0.02%)</title><rect x="98.2375%" y="53" width="0.0182%" height="15" fill="rgb(246,228,12)" fg:x="75634" fg:w="14"/><text x="98.4875%" y="63.50"></text></g><g><title>[kernel::scheme::user::UserInner::respond+1028] (286 samples, 0.37%)</title><rect x="98.2634%" y="37" width="0.3715%" height="15" fill="rgb(213,55,15)" fg:x="75654" fg:w="286"/><text x="98.5134%" y="47.50"></text></g><g><title>[kernel::scheme::user::UserInner::respond] (310 samples, 0.40%)</title><rect x="98.2582%" y="53" width="0.4026%" height="15" fill="rgb(209,9,3)" fg:x="75650" fg:w="310"/><text x="98.5082%" y="63.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify+225] (302 samples, 0.39%)</title><rect x="98.6661%" y="37" width="0.3923%" height="15" fill="rgb(230,59,30)" fg:x="75964" fg:w="302"/><text x="98.9161%" y="47.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (314 samples, 0.41%)</title><rect x="98.6609%" y="53" width="0.4078%" height="15" fill="rgb(209,121,21)" fg:x="75960" fg:w="314"/><text x="98.9109%" y="63.50"></text></g><g><title>[kernel::syscall::futex::futex] (52 samples, 0.07%)</title><rect x="99.0791%" y="53" width="0.0675%" height="15" fill="rgb(220,109,13)" fg:x="76282" fg:w="52"/><text x="99.3291%" y="63.50"></text></g><g><title>[kernel::syscall::syscall] (92 samples, 0.12%)</title><rect x="99.1506%" y="53" width="0.1195%" height="15" fill="rgb(232,18,1)" fg:x="76337" fg:w="92"/><text x="99.4006%" y="63.50"></text></g><g><title>[kernel::syscall::time::clock_gettime+130] (71 samples, 0.09%)</title><rect x="99.2739%" y="37" width="0.0922%" height="15" fill="rgb(215,41,42)" fg:x="76432" fg:w="71"/><text x="99.5239%" y="47.50"></text></g><g><title>[kernel::syscall::time::clock_gettime+137] (45 samples, 0.06%)</title><rect x="99.3662%" y="37" width="0.0584%" height="15" fill="rgb(224,123,36)" fg:x="76503" fg:w="45"/><text x="99.6162%" y="47.50"></text></g><g><title>[kernel::syscall::time::clock_gettime+237] (34 samples, 0.04%)</title><rect x="99.4259%" y="37" width="0.0442%" height="15" fill="rgb(240,125,3)" fg:x="76549" fg:w="34"/><text x="99.6759%" y="47.50"></text></g><g><title>[kernel::syscall::time::clock_gettime+244] (9 samples, 0.01%)</title><rect x="99.4701%" y="37" width="0.0117%" height="15" fill="rgb(205,98,50)" fg:x="76583" fg:w="9"/><text x="99.7201%" y="47.50"></text></g><g><title>[kernel::syscall::time::clock_gettime] (170 samples, 0.22%)</title><rect x="99.2700%" y="53" width="0.2208%" height="15" fill="rgb(205,185,37)" fg:x="76429" fg:w="170"/><text x="99.5200%" y="63.50"></text></g><g><title>[memcpy+72] (8 samples, 0.01%)</title><rect x="99.5298%" y="37" width="0.0104%" height="15" fill="rgb(238,207,15)" fg:x="76629" fg:w="8"/><text x="99.7798%" y="47.50"></text></g><g><title>[memcpy+82] (10 samples, 0.01%)</title><rect x="99.5428%" y="37" width="0.0130%" height="15" fill="rgb(213,199,42)" fg:x="76639" fg:w="10"/><text x="99.7928%" y="47.50"></text></g><g><title>[memcpy+92] (15 samples, 0.02%)</title><rect x="99.5571%" y="37" width="0.0195%" height="15" fill="rgb(235,201,11)" fg:x="76650" fg:w="15"/><text x="99.8071%" y="47.50"></text></g><g><title>[memcpy] (66 samples, 0.09%)</title><rect x="99.4934%" y="53" width="0.0857%" height="15" fill="rgb(207,46,11)" fg:x="76601" fg:w="66"/><text x="99.7434%" y="63.50"></text></g><g><title>[memmove] (19 samples, 0.02%)</title><rect x="99.5792%" y="53" width="0.0247%" height="15" fill="rgb(241,35,35)" fg:x="76667" fg:w="19"/><text x="99.8292%" y="63.50"></text></g><g><title>[memset+80] (80 samples, 0.10%)</title><rect x="99.6350%" y="37" width="0.1039%" height="15" fill="rgb(243,32,47)" fg:x="76710" fg:w="80"/><text x="99.8850%" y="47.50"></text></g><g><title>[memset+84] (53 samples, 0.07%)</title><rect x="99.7389%" y="37" width="0.0688%" height="15" fill="rgb(247,202,23)" fg:x="76790" fg:w="53"/><text x="99.9889%" y="47.50"></text></g><g><title>[memset] (169 samples, 0.22%)</title><rect x="99.6038%" y="53" width="0.2195%" height="15" fill="rgb(219,102,11)" fg:x="76686" fg:w="169"/><text x="99.8538%" y="63.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys+248] (11 samples, 0.01%)</title><rect x="99.8454%" y="37" width="0.0143%" height="15" fill="rgb(243,110,44)" fg:x="76872" fg:w="11"/><text x="100.0954%" y="47.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (31 samples, 0.04%)</title><rect x="99.8234%" y="53" width="0.0403%" height="15" fill="rgb(222,74,54)" fg:x="76855" fg:w="31"/><text x="100.0734%" y="63.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::translate+318] (8 samples, 0.01%)</title><rect x="99.8831%" y="37" width="0.0104%" height="15" fill="rgb(216,99,12)" fg:x="76901" fg:w="8"/><text x="100.1331%" y="47.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::translate] (35 samples, 0.05%)</title><rect x="99.8636%" y="53" width="0.0455%" height="15" fill="rgb(226,22,26)" fg:x="76886" fg:w="35"/><text x="100.1136%" y="63.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::translate+51] (8 samples, 0.01%)</title><rect x="99.8987%" y="37" width="0.0104%" height="15" fill="rgb(217,163,10)" fg:x="76913" fg:w="8"/><text x="100.1487%" y="47.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner+171] (10 samples, 0.01%)</title><rect x="99.9299%" y="37" width="0.0130%" height="15" fill="rgb(213,25,53)" fg:x="76937" fg:w="10"/><text x="100.1799%" y="47.50"></text></g><g><title>all (76,991 samples, 100%)</title><rect x="0.0000%" y="85" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="76991"/><text x="0.2500%" y="95.50"></text></g><g><title>kernel (76,991 samples, 100.00%)</title><rect x="0.0000%" y="69" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="76991"/><text x="0.2500%" y="79.50">kernel</text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (70 samples, 0.09%)</title><rect x="99.9091%" y="53" width="0.0909%" height="15" fill="rgb(229,68,48)" fg:x="76921" fg:w="70"/><text x="100.1591%" y="63.50"></text></g></svg></svg>